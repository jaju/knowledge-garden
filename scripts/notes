#!/usr/bin/env bash
#
# notes.sh — Manage Quarto notes with per-note directories.
#
# Features:
# - Create/open notes in notes/<slug>/ with index.qmd from template
# - Optional Python (--py) or Clojure (--clj) scaffolds
# - Slug = kebab-case directory name
# - Title = long descriptive string (front-matter)
# - Auto-create per-note _metadata.yml with jupyter kernel spec (kg-<slug>)
# - Update kernel spec in _metadata.yml with --set-kernel
# - Print kernel install command with --print-kernel-cmd (user runs manually)
#
# Usage:
#   notes <slug> [--title "Title"] [--py] [--clj] [--set-kernel] [--print-kernel-cmd]
#   notes open <slug> [options...]
#   notes list
#

set -euo pipefail

# --- Resolve script dir even if symlinked ---
resolve_script_dir() {
	local src="${BASH_SOURCE[0]}"
	while [ -L "$src" ]; do
		local dir
		dir="$(cd -P "$(dirname "$src")" && pwd)"
		src="$(readlink "$src")"
		[[ "$src" != /* ]] && src="$dir/$src"
	done
	cd -P "$(dirname "$src")" && pwd
}
PYTHON_VERSION=3.12
SCRIPT_DIR="$(resolve_script_dir)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
NOTES_DIR="$ROOT_DIR/notes"
TEMPLATE_DIR="$ROOT_DIR/templates"
TEMPLATE_NOTE="$TEMPLATE_DIR/note-index.qmd"
EDITOR="${EDITOR:-nvim}"

slugify() {
	printf '%s' "$*" |
		tr '[:upper:]' '[:lower:]' |
		sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g'
}

titleize_from_slug() {
	printf '%s' "$1" | tr '-' ' ' | awk '{ for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) } ; print }'
}

write_note_metadata() {
	local dir="$1" slug="$2" kname="kg-$slug"
	cat >"$dir/_metadata.yml" <<EOF
engine: jupyter
jupyter: $kname
execute:
  daemon: false
  cache: true
  freeze: auto
EOF
	echo "Wrote: $dir/_metadata.yml"
}

print_kernel_install_cmd() {
	local slug="$1" kname="kg-$slug"
	cat <<EOF
# Activate your virtualenv, then run:
python -m pip install -U pip ipykernel
python -m ipykernel install --user --name "$kname" --display-name "Python ($kname)"
EOF
}

update_kernel_in_metadata() {
	local dir="$1" slug="$2" kname="kg-$slug"
	if [[ ! -f "$dir/_metadata.yml" ]]; then
		echo "No _metadata.yml in $dir — creating new one."
		write_note_metadata "$dir" "$slug"
		return
	fi
	# Replace or insert jupyter: line
	if grep -q '^jupyter:' "$dir/_metadata.yml"; then
		sed -i.bak "s|^jupyter:.*|jupyter: $kname|" "$dir/_metadata.yml" && rm -f "$dir/_metadata.yml.bak"
		echo "Updated kernel in $dir/_metadata.yml to $kname"
	else
		echo "jupyter: $kname" >>"$dir/_metadata.yml"
		echo "Added kernel to $dir/_metadata.yml"
	fi
}

ensure_note() {
	local slug="$1" title="${2:-}" with_py="${3:-0}" with_clj="${4:-0}" set_kernel="${5:-0}" print_kernel="${6:-0}"
	local dir="$NOTES_DIR/$slug"
	mkdir -p "$dir"

	# Create index.qmd if missing
	if [[ ! -f "$dir/index.qmd" ]]; then
		[[ -f "$TEMPLATE_NOTE" ]] || {
			echo "Template missing: $TEMPLATE_NOTE" >&2
			exit 1
		}
		[[ -z "$title" ]] && title="$(titleize_from_slug "$slug")"
		local safe_title
		safe_title="$(printf '%s' "$title" | sed -e 's/[&/\]/\\&/g')"
		sed -e "s/{{TITLE}}/$safe_title/g" -e "s/{{SLUG}}/$slug/g" "$TEMPLATE_NOTE" >"$dir/index.qmd"
		echo "Created: $dir/index.qmd"
	fi

	# Optional Python scaffold
	if [[ "$with_py" == "1" ]]; then
		if [[ ! -f "$dir/pyproject.toml" ]]; then
			cat >"$dir/pyproject.toml" <<'PYTOML'
[project]
name = "note"
version = "0.0.0"
requires-python = ">=3.10"
dependencies = []
PYTOML
			echo "Created: $dir/pyproject.toml"
		fi
		if [[ ! -d "$dir/.venv" ]]; then
			if command -v uv >/dev/null 2>&1; then
				(cd "$dir" && uv venv --prompt $slug --seed --python=$PYTHON_VERSION)
			else
				(cd "$dir" && python3 -m venv .venv)
			fi
			echo "Created: $dir/.venv"
		fi
		if [[ ! -f "$dir/.gitignore" ]]; then printf ".venv/\n__pycache__/\n" >"$dir/.gitignore"; fi
		write_note_metadata "$dir" "$slug"
	fi

	# Optional Clojure scaffold
	if [[ "$with_clj" == "1" ]]; then
		if [[ ! -f "$dir/deps.edn" ]]; then
			cat >"$dir/deps.edn" <<'CLJ'
{:paths ["src"]
 :deps  {}}
CLJ
			mkdir -p "$dir/src"
			echo "Created: $dir/deps.edn and src/"
		fi
		if [[ ! -f "$dir/.gitignore" ]]; then printf "target/\n.cpcache/\n" >"$dir/.gitignore"; fi
	fi

	# Kernel operations
	if [[ "$set_kernel" == "1" ]]; then
		update_kernel_in_metadata "$dir" "$slug"
	fi
	if [[ "$print_kernel" == "1" ]]; then
		print_kernel_install_cmd "$slug"
		exit 0
	fi

	# Open in editor after cd
	cd "$dir"
	if [[ -f ".venv/bin/activate" ]]; then
		# shellcheck disable=SC1091
		source ".venv/bin/activate"
	fi
	exec "$EDITOR" "index.qmd"
}

list_slugs() {
	[[ -d "$NOTES_DIR" ]] || return 0
	find "$NOTES_DIR" -mindepth 1 -maxdepth 1 -type d |
		sed -E 's#.*/##' | LC_ALL=C sort
}

venv_python() { printf '%s' ".venv/bin/python"; }

ensure_ipykernel_in_venv() {
	local slug="$1" kname="kg-$slug"
	# Install ipykernel into this venv (idempotent)
	uv pip install -q --upgrade pip ipykernel
	# Register kernelspec (idempotent: overwrites name if exists)
	"$(venv_python)" -m ipykernel install --user --name "$kname" --display-name "Python ($kname)"
}

write_note_metadata() {
	local dir="$1" slug="$2" kname="kg-$slug"
	cat >"$dir/_metadata.yml" <<EOF
jupyter: $kname
execute:
  cache: true
  freeze: auto
EOF
	echo "Wrote: $dir/_metadata.yml"
}

usage() {
	cat <<'USAGE'
Usage:
  notes <slug> [--title "Title"] [--py] [--clj] [--set-kernel] [--print-kernel-cmd]
  notes open <slug> [options...]
  notes list

Options:
  --title "Title"       Set descriptive title in index.qmd
  --py                  Scaffold Python (pyproject.toml, .venv, _metadata.yml)
  --clj                 Scaffold Clojure (deps.edn, src/)
  --set-kernel          Update/add jupyter kernel spec in _metadata.yml
  --print-kernel-cmd    Print ipykernel install command for this note
USAGE
}

main() {
	local cmd slug title="" with_py=0 with_clj=0 set_kernel=0 print_kernel=0
	cmd="${1:-}"
	[[ -z "$cmd" ]] && {
		usage
		exit 2
	}

	if [[ "$cmd" == "list" ]]; then
		list_slugs
		exit 0
	fi
	if [[ "$cmd" == "open" ]]; then shift; fi

	slug="${1:-}"
	shift || true
	[[ -z "$slug" ]] && {
		usage
		exit 2
	}

	local norm
	norm="$(slugify "$slug")"
	if [[ "$norm" != "$slug" ]]; then
		echo "Normalized slug to: $norm"
		slug="$norm"
	fi
	[[ "$slug" =~ ^[a-z0-9]+(-[a-z0-9]+)*$ ]] || {
		echo "Invalid slug: $slug"
		exit 2
	}

	while (("$#")); do
		case "$1" in
		--title)
			shift
			title="${1:-}"
			[[ -n "$title" ]] || {
				echo "--title requires value"
				exit 2
			}
			;;
		--py) with_py=1 ;;
		--clj) with_clj=1 ;;
		--set-kernel) set_kernel=1 ;;
		--print-kernel-cmd) print_kernel=1 ;;
		*)
			echo "Unknown option: $1"
			usage
			exit 2
			;;
		esac
		shift || true
	done

	ensure_note "$slug" "$title" "$with_py" "$with_clj" "$set_kernel" "$print_kernel"
}
main "$@"
