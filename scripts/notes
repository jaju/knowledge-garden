#!/usr/bin/env bash
#
# notes.sh â€” Manage Quarto notes with per-note directories (single entry: index.qmd).
#
# Key points:
# - No _metadata.yml. Kernel is set in index.qmd front-matter (highest priority).
# - Slug = kebab-case directory name under notes/.
# - Title = long descriptive string in index.qmd.
# - Optional scaffolds: Python (--py) with .venv, Clojure (--clj).
# - --set-kernel updates/ensures `engine: jupyter` and `jupyter: kg-<slug>` in index.qmd.
# - --print-kernel-cmd prints the ipykernel install commands (user runs them manually).
#
# Usage:
#   notes <slug> [--title "Title"] [--py] [--clj] [--set-kernel] [--print-kernel-cmd]
#   notes open <slug> [options...]
#   notes list
#
set -euo pipefail

# --- Resolve script dir (works with symlinks) ---
resolve_script_dir() {
	local src="${BASH_SOURCE[0]}"
	while [ -L "$src" ]; do
		local dir
		dir="$(cd -P "$(dirname "$src")" && pwd)"
		src="$(readlink "$src")"
		[[ "$src" != /* ]] && src="$dir/$src"
	done
	cd -P "$(dirname "$src")" && pwd
}
SCRIPT_DIR="$(resolve_script_dir)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
NOTES_DIR="$ROOT_DIR/notes"
TEMPLATE_DIR="$ROOT_DIR/templates"
TEMPLATE_NOTE="$TEMPLATE_DIR/note-index.qmd"
EDITOR="${EDITOR:-nvim}"

# --- helpers ---
slugify() {
	printf '%s' "$*" |
		tr '[:upper:]' '[:lower:]' |
		sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g'
}

titleize_from_slug() {
	printf '%s' "$1" | tr '-' ' ' | awk '{ for(i=1;i<=NF;i++){ $i=toupper(substr($i,1,1)) substr($i,2) } ; print }'
}

print_kernel_install_cmd() {
	local slug="$1" kname="kg-$slug"
	cat <<EOF
# Activate your note's virtualenv (if any), then run:
python -m pip install -U pip ipykernel
python -m ipykernel install --user --name "$kname" --display-name "Python ($kname)"
EOF
}

# Update or create front-matter in index.qmd:
# - ensures a YAML front-matter block exists
# - removes any existing 'jupyter:' and 'engine:' in front-matter
# - adds:
#     engine: jupyter
#     jupyter: kg-<slug>
# - preserves the rest of the front-matter and body
ensure_front_matter_kernel() {
	local file="$1" slug="$2" kname="kg-$slug"
	if [[ ! -s "$file" ]]; then
		cat >"$file" <<EOF
---
title: "$(titleize_from_slug "$slug")"
slug: "$slug"
engine: jupyter
jupyter: $kname
execute:
  daemon: false
  cache: true
  freeze: auto
---
EOF
		return
	fi

	# If file lacks starting '---', create a new front-matter and prepend
	if ! head -n1 "$file" | grep -qx '---'; then
		local tmp
		tmp="$(mktemp)"
		cat >"$tmp" <<EOF
---
engine: jupyter
jupyter: $kname
execute:
  daemon: false
  cache: true
  freeze: auto
---
EOF
		cat "$file" >>"$tmp"
		mv "$tmp" "$file"
		return
	fi

	# Replace inside existing front-matter
	# awk logic:
	#  - capture lines between first and second --- (front-matter)
	#  - drop lines starting with jupyter: or engine:
	#  - inject engine/jupyter before closing ---
	local tmp
	tmp="$(mktemp)"
	awk -v kname="$kname" '
    BEGIN{inmeta=0}
    NR==1 && $0=="---"{print; inmeta=1; next}
    inmeta && $0=="---"{print "engine: jupyter"; print "jupyter: " kname; print "execute:"; print "  daemon: false"; print "  cache: true"; print "  freeze: auto"; print; inmeta=0; next}
    inmeta && ($0 ~ /^[[:space:]]*jupyter:/ || $0 ~ /^[[:space:]]*engine:/){next}
    {print}
  ' "$file" >"$tmp"
	mv "$tmp" "$file"
}

ensure_note() {
	local slug="$1" title="${2:-}" with_py="${3:-0}" with_clj="${4:-0}" set_kernel="${5:-0}" print_kernel="${6:-0}"
	local dir="$NOTES_DIR/$slug"
	mkdir -p "$dir"

	local idx="$dir/index.qmd"
	if [[ ! -f "$idx" ]]; then
		if [[ -f "$TEMPLATE_NOTE" ]]; then
			# Fill template with TITLE/SLUG; kernel will be injected afterwards
			local safe_title
			[[ -z "$title" ]] && title="$(titleize_from_slug "$slug")"
			safe_title="$(printf '%s' "$title" | sed -e 's/[&/\]/\\&/g')"
			sed -e "s/{{TITLE}}/$safe_title/g" -e "s/{{SLUG}}/$slug/g" "$TEMPLATE_NOTE" >"$idx"
		else
			# Minimal file; kernel/front-matter will be ensured below
			printf "" >"$idx"
		fi
		echo "Created: $idx"
	fi

	# Optional Python scaffold
	if [[ "$with_py" == "1" ]]; then
		if [[ ! -f "$dir/pyproject.toml" ]]; then
			cat >"$dir/pyproject.toml" <<'PYTOML'
[project]
name = "note"
version = "0.0.0"
requires-python = ">=3.10"
dependencies = []
PYTOML
			echo "Created: $dir/pyproject.toml"
		fi
		if [[ ! -d "$dir/.venv" ]]; then
			if command -v uv >/dev/null 2>&1; then
				(cd "$dir" && uv venv .venv)
			else
				(cd "$dir" && python3 -m venv .venv)
			fi
			echo "Created: $dir/.venv"
		fi
		if [[ ! -f "$dir/.gitignore" ]]; then printf ".venv/\n__pycache__/\n" >"$dir/.gitignore"; fi
	fi

	# Optional Clojure scaffold
	if [[ "$with_clj" == "1" ]]; then
		if [[ ! -f "$dir/deps.edn" ]]; then
			cat >"$dir/deps.edn" <<'CLJ'
{:paths ["src"]
 :deps  {}}
CLJ
			mkdir -p "$dir/src"
			echo "Created: $dir/deps.edn and src/"
		fi
		if [[ ! -f "$dir/.gitignore" ]]; then printf "target/\n.cpcache/\n" >"$dir/.gitignore"; fi
	fi

	# Kernel operations
	if [[ "$set_kernel" == "1" ]]; then
		ensure_front_matter_kernel "$idx" "$slug"
		echo "Kernel set in front-matter: engine=jupyter, jupyter=kg-$slug"
	fi
	if [[ "$print_kernel" == "1" ]]; then
		print_kernel_install_cmd "$slug"
		exit 0
	fi

	# Open in editor after cd; activate venv if present
	cd "$dir"
	if [[ -f ".venv/bin/activate" ]]; then
		# shellcheck disable=SC1091
		source ".venv/bin/activate"
	fi
	exec "$EDITOR" "index.qmd"
}

list_slugs() {
	[[ -d "$NOTES_DIR" ]] || return 0
	find "$NOTES_DIR" -mindepth 1 -maxdepth 1 -type d |
		sed -E 's#.*/##' | LC_ALL=C sort
}

usage() {
	cat <<'USAGE'
Usage:
  notes <slug> [--title "Title"] [--py] [--clj] [--set-kernel] [--print-kernel-cmd]
  notes open <slug> [options...]
  notes list

Options:
  --title "Title"       Set descriptive title in index.qmd
  --py                  Scaffold Python (pyproject.toml, .venv)
  --clj                 Scaffold Clojure (deps.edn, src/)
  --set-kernel          Write front-matter: engine: jupyter, jupyter: kg-<slug>
  --print-kernel-cmd    Print ipykernel install commands for kg-<slug> (no changes)
USAGE
}

main() {
	local cmd slug title="" with_py=0 with_clj=0 set_kernel=0 print_kernel=0
	cmd="${1:-}"
	[[ -z "$cmd" ]] && {
		usage
		exit 2
	}

	if [[ "$cmd" == "list" ]]; then
		list_slugs
		exit 0
	fi
	if [[ "$cmd" == "open" ]]; then shift; fi

	slug="${1:-}"
	shift || true
	[[ -z "$slug" ]] && {
		usage
		exit 2
	}

	local norm
	norm="$(slugify "$slug")"
	if [[ "$norm" != "$slug" ]]; then
		echo "Normalized slug to: $norm"
		slug="$norm"
	fi
	[[ "$slug" =~ ^[a-z0-9]+(-[a-z0-9]+)*$ ]] || {
		echo "Invalid slug: $slug"
		exit 2
	}

	while (("$#")); do
		case "$1" in
		--title)
			shift
			title="${1:-}"
			[[ -n "$title" ]] || {
				echo "--title requires value"
				exit 2
			}
			;;
		--py) with_py=1 ;;
		--clj) with_clj=1 ;;
		--set-kernel) set_kernel=1 ;;
		--print-kernel-cmd) print_kernel=1 ;;
		*)
			echo "Unknown option: $1"
			usage
			exit 2
			;;
		esac
		shift || true
	done

	ensure_note "$slug" "$title" "$with_py" "$with_clj" "$set_kernel" "$print_kernel"
}
main "$@"
