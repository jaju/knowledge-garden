#!/usr/bin/env bash
# Blog post manager for Quarto (location-agnostic, year-aware)

set -euo pipefail

# --- Resolve script dir (handles symlinks) ---
resolve_script_dir() {
	local src="${BASH_SOURCE[0]}"
	while [ -L "$src" ]; do
		local dir
		dir="$(cd -P "$(dirname "$src")" && pwd)"
		src="$(readlink "$src")"
		[[ "$src" != /* ]] && src="$dir/$src"
	done
	cd -P "$(dirname "$src")" && pwd
}

SCRIPT_DIR="$(resolve_script_dir)"
ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
BLOG_DIR="$ROOT_DIR/blog"
TEMPLATE_DIR="$ROOT_DIR/templates"
TEMPLATE="$TEMPLATE_DIR/blog-post.qmd"
EDITOR="${EDITOR:-nvim}"

CURRENT_YEAR="$(date +%Y)"

slugify() {
	printf '%s' "$*" |
		tr '[:upper:]' '[:lower:]' |
		sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g'
}

# Find a post by slug across ALL years
find_post_by_slug() {
	local slug="$1"
	find "$BLOG_DIR" -type f -name "*.qmd" 2>/dev/null |
		grep -E '/[0-9]{4}(-[0-9]{2}){2}-'"$slug"'\.qmd$' |
		head -n 1
}

# List slugs for a given year (without date), or all years
list_slugs_impl() {
	local year_filter="${1:-}"
	if [[ -n "$year_filter" ]]; then
		local dir="$BLOG_DIR/$year_filter"
		[[ -d "$dir" ]] || return 0
		find "$dir" -type f -name "*.qmd" 2>/dev/null |
			sed -E 's#.*/[0-9]{4}(-[0-9]{2}){2}-(.+)\.qmd#\2#' |
			LC_ALL=C sort -u
	else
		[[ -d "$BLOG_DIR" ]] || return 0
		find "$BLOG_DIR" -type f -name "*.qmd" 2>/dev/null |
			sed -E 's#.*/[0-9]{4}(-[0-9]{2}){2}-(.+)\.qmd#\2#' |
			LC_ALL=C sort -u
	fi
}

create_post() {
	if [[ $# -eq 0 ]]; then
		echo "Usage: blog new <title>" >&2
		exit 2
	fi
	local title="$*"
	local slug
	slug="$(slugify "$title")"

	# If already exists anywhere, open it
	local existing
	existing="$(find_post_by_slug "$slug" || true)"
	if [[ -n "${existing:-}" ]]; then
		echo "Post already exists: $existing"
		"$EDITOR" "$existing"
		return
	fi

	local today year target_dir file
	today="$(date +%Y-%m-%d)"
	year="${today%%-*}"
	# Pass {{YEAR}} to the template

	# ALWAYS put into blog/<current-year> (your new rule)
	target_dir="$BLOG_DIR/$year"
	mkdir -p "$target_dir"

	file="$target_dir/${today}-${slug}.qmd"

	if [[ ! -f "$TEMPLATE" ]]; then
		echo "Template not found: $TEMPLATE" >&2
		exit 1
	fi

	sed -e "s/{{DATE}}/$today/g" \
		-e "s/{{YEAR}}/$year/g" \
		-e "s/{{SLUG}}/$slug/g" \
		-e "s/{{TITLE}}/$(
			printf '%s' "$title" | sed -e 's/[&/\]/\\&/g'
		)/g" \
		"$TEMPLATE" >"$file"

	echo "Created: $file"
	"$EDITOR" "$file"
}

open_post() {
	if [[ $# -eq 0 ]]; then
		echo "Usage: blog open <title-or-slug>" >&2
		exit 2
	fi
	local slug
	slug="$(slugify "$*")"

	local existing
	existing="$(find_post_by_slug "$slug" || true)"
	if [[ -z "${existing:-}" ]]; then
		echo "No post found for slug: $slug" >&2
		exit 1
	fi
	"$EDITOR" "$existing"
}

list_cmd() {
	# Defaults to current year; supports --all or --year YYYY
	local year=""
	while (("$#")); do
		case "$1" in
		--all) year="" ;;
		--year)
			shift
			[[ "${1:-}" =~ ^[0-9]{4}$ ]] || {
				echo "Invalid year"
				exit 2
			}
			year="$1"
			;;
		*)
			echo "Usage: blog list [--all | --year YYYY]"
			exit 2
			;;
		esac
		shift || true
	done

	if [[ -z "$year" && "${1:-}" != "--all" ]]; then
		year="$CURRENT_YEAR"
	fi
	list_slugs_impl "$year"
}

case "${1:-}" in
new)
	shift
	create_post "$@"
	;;
open)
	shift
	open_post "$@"
	;;
list)
	shift
	list_cmd "$@"
	;;
*)
	cat <<USAGE
Usage:
  blog new "<title>"           # create in blog/$CURRENT_YEAR/
  blog open "<title-or-slug>"  # open across all years
  blog list [--all|--year YYYY]# list slugs (default: current year)
USAGE
	exit 2
	;;
esac
